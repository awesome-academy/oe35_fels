<?php

namespace Tests\Feature\views\front_end;

use App\Models\Course;
use App\Models\Role;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;
use Faker\Factory as Faker;

class HomepageTest extends TestCase
{
    protected $response;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $url = route('homepage');
        $this->response = $this->get($url);
    }

    public function test_it_home_page_view()
    {
        $response = $this->response;

        $response->assertSee(trans('messages.front_end.fels.popular_course_text'));
    }

    public function test_it_view_popular_course()
    {
        $faker = Faker::create();
        $course = factory(Course::class)->create();
        $roleId = config('const.seeder.role_id');
        $limit = config('const.seeder.number');

        for ($i = 0; $i < $limit; $i++) {
            $array[$i] = factory(User::class)->create([
                'role_id' => $roleId,
                'email' => $faker->unique()->safeEmail,
                'email_verified_at' => now(),
                'password' => bcrypt('123456789'),
            ]);
            $course->users()->attach($array[$i]->id);
        }

        $response = $this->response;
        $response->assertSee($course->name);
        $response->assertSee($course->users_count);
        $response->assertSee($course->words_count);
        $response->assertDontSee(trans('messages.front_end.fels.not_found'));
    }

    public function test_it_can_navigate_detail_course_page()
    {
        $user = factory(User::class)->create([
            'role_id' => config('const.seeder.role_id'),
        ]);
        $course = factory(Course::class)->create();
        $response = $this->actingAs($user)->get(route('fels.course.detail', $course));

        $response->assertSee($course->name);
        $response->assertSee($course->description);
    }

    public function test_view_empty_list_course()
    {
        Course::query()->delete();

        $response = $this->response;
        $response->assertDontSee(trans('messages.front_end.fels.not_found'));
    }
}
