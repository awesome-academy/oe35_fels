<?php

namespace Tests\Feature\Http\Controllers\Fels;

use App\Http\Controllers\Fels\CourseController;
use App\Http\Controllers\Fels\LessonController;
use App\Http\Requests\CourseRequest;
use App\Models\Course;
use App\Models\Lesson;
use App\Repositories\ModelsInterface\LessonRepositoryInterface;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Mockery;
use Tests\TestCase;
use Illuminate\Http\Request;
use Illuminate\Support\Collection;

class LessonControllerTest extends TestCase
{
    use WithoutMiddleware;

    protected $lessonRepoMock;
    protected $lessonController;
    protected $course;
    protected $lesson;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->lessonRepoMock = Mockery::mock($this->app->make(LessonRepositoryInterface::class))->makePartial();
        $this->lessonController = new LessonController($this->lessonRepoMock);
        $this->course = factory(Course::class)->create();
        $this->lesson = factory(Lesson::class)->create([
            'course_id' => $this->course->id,
        ]);
    }

    public function test_must_choose_course_first()
    {
        $url = route('fels.lesson.start');
        $urlIntend = route('fels.course.list');
        $this->get($url)->assertRedirect($urlIntend);
    }

    public function test_get_exam_lesson()
    {
        $courseId = $this->course->id;
        $this->lessonRepoMock->shouldReceive('getLessonOfCourse')->with($courseId)
            ->andReturn(Lesson::class);
        $this->lessonRepoMock->getLessonOfCourse($courseId);

        $result = $this->lessonController->getExamLesson($this->course);

        $this->assertEquals('front-end.lessons.exam', $result->getName());
        $this->assertArrayHasKey('lesson', $result->getData());
    }

    public function test_check_exam_lesson()
    {
        $request = new Request([
            'lessonId' => $this->lesson->id,
        ]);

        $this->lessonRepoMock->shouldReceive('checkResult')->andReturn(true);
        $result = $this->lessonRepoMock->checkResult($request);
        $this->lessonRepoMock->shouldReceive('findById')->with($request->lessonId)
            ->andReturn(Lesson::class);
        $data = $this->lessonRepoMock->findById($request->lessonId);

        $this->assertTrue($result);
        $this->assertInstanceOf(Lesson::class, $this->app->make($data));
    }

    public function test_get_result_of_lesson()
    {
        $lessonId = $this->lesson->id;
        $lessonName = $this->lesson->name;
        $this->lessonRepoMock->shouldReceive('getResults')->with($lessonId)
            ->andReturn(Collection::class);
        $this->lessonRepoMock->getResults($lessonId);
        $this->lessonRepoMock->shouldReceive('getTotalQuestion')->with($lessonId);
        $this->lessonRepoMock->getTotalQuestion($lessonId);

        $view = $this->lessonController->getResultLessons($this->lesson);

        $this->assertEquals('front-end.lessons.result', $view->getName());
        $this->assertArrayHasKey('results', $view->getData());
        $this->assertArrayHasKey('totalQuestion', $view->getData());
    }
}
