<?php

namespace Tests\Unit\Models;

use App\Models\Profile;
use App\Models\Role;
use App\Models\Social;
use App\Models\User;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class UserTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $user;
    protected $role;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->role = factory(Role::class)->create();
        $this->user = factory(User::class)->create([
            'role_id' => $this->role->id,
        ]);

    }

    /**
     * Test table has columns.
     *
     * @return void
     */
    public function test_users_table_has_expected_columns()
    {
        $this->assertTrue(
            Schema::hasColumns('users', [
                'id',
                'role_id',
                'email',
                'email_verified_at',
                'password',
                'remember_token',
                'deleted_at',
            ]),
            1
        );
    }

    /**
     * Test User mass assignment properties.
     *
     * @return void
     */
    public function test_contains_valid_fillable_properties()
    {
        $this->assertEquals([
            'name',
            'email',
            'password',
            'role_id',
            'email_verified_at',
        ], $this->user->getFillable());
    }

    public function test_contains_valid_hidden_properties()
    {
        $this->assertEquals([
            'password',
            'remember_token',
        ], $this->user->getHidden());
    }

    public function test_user_has_one_social()
    {
        $user = $this->user;
        $social = factory(Social::class)->create([
            'user_id' => $user->id,
        ]);

        $this->assertEquals(1, $user->social->count());
        $this->assertInstanceOf(Social::class, $user->social);
    }

    public function test_user_belongs_to_role()
    {
        $user = $this->user;

        $this->assertEquals(1, $user->role->count());
        $this->assertInstanceOf(Role::class, $user->role);
    }

    public function test_user_has_one_profile()
    {
        $user = $this->user;
        $profile = factory(Profile::class)->create([
            'user_id' => $user->id,
        ]);

        $this->assertEquals(1, $user->profile->count());
        $this->assertInstanceOf(Profile::class, $user->profile);
    }

    public function test_user_belongs_to_many_courses()
    {
        $user = $this->user;

        $this->assertInstanceOf(Collection::class, $user->courses);
    }

    public function test_user_belongs_to_many_words()
    {
        $user = $this->user;

        $this->assertInstanceOf(Collection::class, $user->words);
    }

    public function test_user_belongs_to_many_lessons()
    {
        $user = $this->user;

        $this->assertInstanceOf(Collection::class, $user->lessons);
    }
}
