<?php

namespace Tests\Unit\Models;

use App\Models\Course;
use App\Models\Lesson;
use App\Models\Option;
use App\Models\Question;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class OptionTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $option;
    protected $question;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $course = factory(Course::class)->create();
        $lesson = factory(Lesson::class)->create([
            'course_id' => $course->id,
        ]);
        $this->question = factory(Question::class)->create([
            'lesson_id' => $lesson->id,
        ]);
        $this->option = factory(Option::class)->create([
            'question_id' => $this->question->id,
        ]);
    }

    /**
     * Test table has columns.
     *
     * @return void
     */
    public function test_options_table_has_expected_columns()
    {
        $this->assertTrue(
            Schema::hasColumns('options', [
                'id',
                'is_correct',
                'question_id',
                'name',
            ]),
            1
        );
    }

    /**
     * Test Option mass assignment properties.
     *
     * @return void
     */
    public function test_contains_valid_fillable_properties()
    {
        $this->assertEquals([
            'name',
            'is_correct',
            'question_id',
        ], $this->option->getFillable());
    }

    public function test_option_belongs_to_question()
    {
        $option = $this->option;

        $this->assertEquals(1, $option->question->count());
        $this->assertInstanceOf(Question::class, $option->question);
    }
}
