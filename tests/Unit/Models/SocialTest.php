<?php

namespace Tests\Unit\Models;

use App\Models\Role;
use App\Models\Social;
use App\Models\User;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class SocialTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $social;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $role = factory(Role::class)->create();
        $user = factory(User::class)->create([
            'role_id' => $role->id,
        ]);
        $this->social = factory(Social::class)->create([
            'user_id' => $user->id,
        ]);
    }

    /**
     * Test table has columns.
     *
     * @return void
     */
    public function test_socials_table_has_expected_columns()
    {
        $this->assertTrue(
            Schema::hasColumns('socials', [
                'id',
                'provider_id',
                'provider_name',
                'access_token',
                'user_id',
            ]),
            1
        );
    }

    /**
     * Test Social mass assignment properties.
     *
     * @return void
     */
    public function test_contains_valid_fillable_properties()
    {
        $this->assertEquals([
            'provider_id',
            'provider_name',
            'access_token',
            'user_id',
        ], $this->social->getFillable());
    }

    public function test_social_belongs_to_user()
    {
        $social = $this->social;

        $this->assertEquals(1, $social->user->count());
        $this->assertInstanceOf(User::class, $social->user);
    }
}
