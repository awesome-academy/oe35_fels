<?php

namespace Tests\Unit\Models;

use App\Models\Course;
use App\Models\Lesson;
use App\Models\Option;
use App\Models\Question;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class QuestionTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $question;
    protected $option;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $course = factory(Course::class)->create();
        $lesson = factory(Lesson::class)->create([
            'course_id' => $course->id,
        ]);
        $this->question = factory(Question::class)->create([
            'lesson_id' => $lesson->id,
        ]);
        $this->option = factory(Option::class)->create([
            'question_id' => $this->question->id,
        ]);
    }

    /**
     * Test table has columns.
     *
     * @return void
     */
    public function test_questions_table_has_expected_columns()
    {
        $this->assertTrue(
            Schema::hasColumns('questions', [
                'id',
                'lesson_id',
                'name',
            ]),
            1
        );
    }

    /**
     * Test Question mass assignment properties.
     *
     * @return void
     */
    public function test_contains_valid_fillable_properties()
    {
        $this->assertEquals([
            'name',
            'lesson_id',
        ], $this->question->getFillable());
    }

    public function test_question_has_many_options()
    {
        $option = $this->option;
        $question = $this->question;

        $this->assertTrue($question->options->contains($option));
        $this->assertInstanceOf(Collection::class, $question->options);
    }

    public function test_question_belongs_to_lesson()
    {
        $question = $this->question;

        $this->assertEquals(1, $question->lesson->count());
        $this->assertInstanceOf(Lesson::class, $question->lesson);
    }
}
