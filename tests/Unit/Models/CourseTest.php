<?php

namespace Tests\Unit\Models;

use App\Models\Course;
use App\Models\Lesson;
use App\Models\Word;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class CourseTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $course;
    protected $word;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->course = factory(Course::class)->create();
        $this->word = factory(Word::class)->create([
            'course_id' => $this->course->id,
        ]);
        $lesson = factory(Lesson::class)->create([
            'course_id' => $this->course->id,
        ]);
    }

    /**
     * Test table has columns.
     *
     * @return void
     */
    public function test_courses_table_has_expected_columns()
    {
        $this->assertTrue(
            Schema::hasColumns('courses', [
                'id',
                'name',
                'description',
            ]),
            1
        );
    }

    /**
     * Test Course mass assignment properties.
     *
     * @return void
     */
    public function test_contains_valid_fillable_properties()
    {
        $this->assertEquals([
            'name',
            'description',
        ], $this->course->getFillable());
    }

    public function test_course_has_many_words()
    {
        $course = $this->course;
        $word = $this->word;

        $this->assertTrue($course->words->contains($word));
        $this->assertInstanceOf(Collection::class, $course->words);
    }

    public function test_course_has_one_lesson()
    {
        $course = $this->course;

        $this->assertEquals(1, $course->lesson->count());
        $this->assertInstanceOf(Lesson::class, $course->lesson);
    }

    public function test_course_belongs_to_many_users()
    {
        $course = $this->course;

        $this->assertInstanceOf(Collection::class, $course->users);
    }

    public function test_scope_count_info()
    {
        $course = $this->course->countInfo()->first();

        $this->assertNotNull($course->words_count);
        $this->assertNotNull($course->users_count);
    }
}
